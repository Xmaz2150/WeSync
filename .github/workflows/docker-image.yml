name: Docker Image CI

on:
  push:
    branches: [ "master" ]
    paths:
      - 'backend/**'
      - 'frontend/**'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        directory: [backend, frontend]
        include:
          - directory: backend
            dockerfile: .github/workflows/backend/Dockerfile
            image_name: zirahhh/wesync-backend
            version: '1.0'
            container_name: backend-container
          - directory: frontend
            dockerfile: .github/workflows/frontend/Dockerfile
            image_name: zirahhh/wesync-frontend
            version: '1.0'
            container_name: frontend-container

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          docker build . --file ${{ matrix.dockerfile }} --tag ${{ matrix.image_name }}:${{ matrix.version }}
          docker push ${{ matrix.image_name }}:${{ matrix.version }}

      - name: SSH into server and pull latest backend image
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            if [ "$(docker ps -q -f name=${{ matrix.container_name }})" ]; then
                    echo "Stopping and removing running container: ${{ matrix.container_name }}"
                    docker stop ${{ matrix.container_name }}
                    docker rm ${{ matrix.container_name }}
            elif [ "$(docker ps -aq -f name=${{ matrix.container_name }})" ]; then
                    echo "Removing non running container: ${{ matrix.container_name }}"
                    docker rm ${{ matrix.container_name }}
            fi

            docker pull ${{ matrix.image_name }}:${{ matrix.version }}

            if [ "${{ matrix.directory }}" == "backend" ]; then
              docker run -d --name ${{ matrix.container_name }} \
                -e ONLINE_STORAGE=${{ secrets.ONLINE_STORAGE }} \
                -e DO_REGION=${{ secrets.DO_REGION }} \
                -e DO_ENDPOINT=${{ secrets.DO_ENDPOINT }} \
                -e DO_ACCESS_KEY=${{ secrets.DO_ACCESS_KEY }} \
                -e DO_SECRET_KEY=${{ secrets.DO_SECRET_KEY }} \
                -e DO_BUCKET_NAME=${{ secrets.DO_BUCKET_NAME }} \
                -e POSTGRESQL_DATABASE_URI=${{ secrets.POSTGRESQL_DATABASE_URI }} \
                -e WSYNC_PGSQL_USER=${{ secrets.WSYNC_PGSQL_USER }} \
                -e WSYNC_PGSQL_PWD=${{ secrets.WSYNC_PGSQL_PWD }} \
                -e WSYNC_PGSQL_HOST=${{ secrets.WSYNC_PGSQL_HOST }} \
                -e WSYNC_PGSQL_HOST_PORT=${{ secrets.WSYNC_PGSQL_HOST_PORT }} \
                -e WSYNC_ENV=${{ secrets.WSYNC_ENV }} \
                -e IS_SU=${{ secrets.IS_SU }} \
                -e SECRET_KEY=${{ secrets.SECRET_KEY }} \
                -e JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }} \
                -p 5000:5000 \
                ${{ matrix.image_name }}:${{ matrix.version }}
            elif [ "${{ matrix.directory }}" == "frontend" ]; then
              docker run -d --name ${{ matrix.container_name }} \
                -e REACT_APP_API_URL=${{ secrets.REACT_APP_API_URL }} \
                -e REACT_APP_CDN_URL=${{ secrets.REACT_APP_CDN_URL }} \
                -p 3000:3000 \
                ${{ matrix.image_name }}:${{ matrix.version }}
            fi

            docker image prune -a -f
